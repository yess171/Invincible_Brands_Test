tasks: 
1
a and b

creation of the template with basic Cloud Formation parameters/ressources for autoScalingGroup:
parameters
	AMI-ID //image is required to launch instances  
ressources
	NotificationTopic //it automates sending email/text message based on events
	LaunchConfiguration //basic config will be used when creating new instance
	autoScalingGroup //auto scaling group of proprties
		MinSize //num min of instances
		MaxSize //max num of instances
		DesiredCapacity //desired number of instances
		Timeout //CF should allot before timing out stack creation operation
		HealthCheckType //ELB/EC2 Thus ELB health checks are  smarter and verify that actual app works instead of verifying that just 					an instance works
		HealthCheckGracePeriod //determine how long to wait before checking the health status of the instance
		ScaleInCooldown //The amount of time, in seconds, after a scale-in activity completes before another scale-in activity can 					start.
		ScaleOutCooldown //same like ScaleInCooldown
		DeleteOnTermination //Indicates whether to delete the volume when the instance is terminated. For Amazon EC2 Auto Scaling, 						the default value is true.
		AdjustmentType  //Specifies how the scaling adjustment is interpreted
		ScalingAdjustment  //The amount by which to scale, based on the specified adjustment type
		NotificationConfiguration //defines when we will receive an email 
		LaunchConfigurationName // name of the launch configuration 


c
adding to ressources
	NFSServer
I have created NFS Server based on an EC2 instance, 
the second option is to Create and EBS Volume in the EC2 instance then modify it to work as and NFS Storage. this code is to instanciate the EBS Volume
"EBSVolume" : {
   "Type" : "AWS::EC2::Volume",
   "Properties" : {
      "Size" : "100",
      "VolumeType" : "io1",
      "Iops" : "100",
      "AvailabilityZone" : { "Fn::GetAtt" : [ "EC2Instance", "AvailabilityZone" ] }
   }
} 

d
adding to parameters
	Subnets

e
adding to ressources
	WebServerSecurityGroup //adding a SG to allow only port 80 and 22
adding to autoScalingGroup the propertie SecurityGroups 

2
//to handle a big number of users[1k-10K] Users we should add to our infrastructure Availability zonesand Policy to handle when we shoudl scale up / down
adding to parameters
	VPC 
	AZs
	ALBRequestCountTargetValue

//to be able to use a load balancer between the 2 (or more AZs) we should instanciate a LB listener and target group (to recognize our subnets)
//ALBRequestCountPolicy will check how much conection to our server has been reached in order to trigger the scalablity 
adding to ressources
	myLoadBalancer
	myLoadBalancerListener
	myTargetGroup
	myALBRequestCountPolicy
adding to autoScalingGroup the propertie VPCZoneIdentifier TargetGroupARNs 

3
In Order to use a Redis Cluster via ElasticCache for the autoScalingGroup
we can:
solution 1:
//do it via AWS console
	- Create a Redis with Cluster Mode Enabled using AWS ElastiCache //taken from AWS Documentation

aws elasticache create-replication-group \
   --replication-group-id sample-repl-group \
   --replication-group-description "Demo cluster with replicas" \
   --num-node-groups 3 \
   --replicas-per-node-group 2 \
   --cache-node-type cache.m4.large \
   --cache-parameter-group default.redis3.2.cluster.on \
   --engine redis \
   --engine-version 3.2.4
   --security-group-ids SECURITY_GROUP_ID       
   --cache-subnet-group-name SUBNET_GROUP_NAME>
 
	-  launch an ElastiCache cluster in a specific Availability Zone and make sure to specify the Preferred Zone
	-  select Spread Nodes Across Zones in order to distribute cache nodes across these zones as evenly as possible

Solution 2:
// via command line using powerShell commands:

$VPC = Get-EC2Vpc -Filter @{name='isDefault'; value='true'}
$Group = New-invincible_brands_asg -GroupName 'ElastiCacheRedis' -Description 'Allows TCP Port 6379'
Grant-invincible_brands_asgIngress -GroupId $Group -IpPermission  @{ IpProtocol="tcp"; FromPort="6379"; ToPort="6379"; IpRanges=$VPC.CidrBlock }

New-ECCacheCluster -CacheClusterId 'Invincible_Brand_Cluster' -Engine 'redis' -CacheNodeType 'cache.t2.micro' -NumCacheNode 1 -SecurityGroupId $Group

(Get-ECCacheCluster -CacheClusterId 'Invincible_Brand_Cluster' -ShowCacheNodeInfo $true).CacheNodes[0].Endpoint.Address

